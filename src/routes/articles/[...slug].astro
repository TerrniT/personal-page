---
import { getLocalePath, t, setDynamicParams, getDefaultLocalePlaceholder, getLocalePlaceholder } from 'i18n:astro'

import { getCollection } from 'astro:content'

import BackToPrev from '@components/BackToPrev.astro'

import FormattedDate from '@components/FormattedDate.astro'

import PageLayout from '@layouts/PageLayout.astro'

import { readingTime } from '@lib/utils'

import { SITE } from '@consts'

import sitemap from 'i18n:astro/sitemap'

import { collectionFilters, handleI18nSlug } from '@astrolicious/i18n/content-collections'

import type { GetStaticPaths } from 'astro'

export const getStaticPaths = (async () => {
  const locale = getLocalePlaceholder()
  const defaultLocale = getDefaultLocalePlaceholder()

  const posts = (await getCollection('articles', (post) => collectionFilters.byLocale(post, { locale }))).filter(
    (p) => !p.data.draft,
  )

  return await Promise.all(
    posts.map(async (post) => {
      const equivalentPosts = await getCollection('articles', (p) =>
        collectionFilters.matchingEntries(p, {
          currentEntry: post,
          key: 'defaultLocaleVersion' as unknown as never,
          locale,
          defaultLocale,
        }),
      )

      const dynamicParams = equivalentPosts.map((entry) => {
        const { locale, slug } = handleI18nSlug(entry.slug)

        return {
          locale,
          params: {
            slug,
          },
        }
      })

      sitemap({
        dynamicParams,
      })

      return {
        params: {
          slug: handleI18nSlug(post.slug).slug,
        },
        props: {
          post,
          dynamicParams,
        },
      }
    }),
  )
}) satisfies GetStaticPaths

const { post, dynamicParams } = Astro.props

setDynamicParams(dynamicParams)

const { Content } = await post.render()
---

<PageLayout title={post.data.title} description={post.data.description ?? ''} author={post.data.author ?? SITE.NAME}>
  <div class="animate">
    <BackToPrev href={getLocalePath('/articles')}> {t('articles.back_to')}</BackToPrev>
  </div>
  <div class="my-10 space-y-1">
    <div class="animate flex items-center gap-1.5">
      <div class="font-base text-sm">
        <FormattedDate date={post.data.date} />
      </div>
      &bull;
      <div class="font-base text-sm">
        {readingTime(post.body)}
      </div>
    </div>

    <p class="animate text-2xl font-semibold text-black dark:text-white">
      {post.data.title}
    </p>
    <div class="my-2 flex flex-row gap-x-2">
      {
        post.data.tags &&
          post.data.tags.length > 0 &&
          post.data.tags.map((tag) => (
            <span class="animate w-fit rounded-sm bg-muted-foreground/10 px-1 py-0.5 text-xs text-muted-foreground">
              {tag}
            </span>
          ))
      }
    </div>
    {
      post.data.cover_url && (
        <div class="my-5 w-full rounded-md">
          <img src={'/articles/' + post.data.cover_url} alt={post.data.title} class="animate mt-3 rounded-md" />
        </div>
      )
    }
  </div>
  <article class="animate">
    <Content />
  </article>
</PageLayout>
