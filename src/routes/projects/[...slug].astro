---
import { getLocalePath, t, setDynamicParams, getDefaultLocalePlaceholder, getLocalePlaceholder } from 'i18n:astro'

import { getCollection } from 'astro:content'

import Button from '@components/ui/vue/button/button.vue'

import BackToPrev from '@components/BackToPrev.astro'
import FormattedDate from '@components/FormattedDate.astro'

import PageLayout from '@layouts/PageLayout.astro'

import { readingTime, devIconResolver } from '@lib/utils'

import { Icon } from 'astro-icon/components'

import sitemap from 'i18n:astro/sitemap'

import { collectionFilters, handleI18nSlug } from '@astrolicious/i18n/content-collections'

import type { GetStaticPaths } from 'astro'

export const getStaticPaths = (async () => {
  const locale = getLocalePlaceholder()
  const defaultLocale = getDefaultLocalePlaceholder()

  const projects = (await getCollection('projects', (post) => collectionFilters.byLocale(post, { locale })))
    .filter((p) => !p.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())

  return await Promise.all(
    projects.map(async (project) => {
      const equivalentProjects = await getCollection('projects', (p) =>
        collectionFilters.matchingEntries(p, {
          currentEntry: project,
          key: 'defaultLocaleVersion' as unknown as never,
          locale,
          defaultLocale,
        }),
      )

      const dynamicParams = equivalentProjects.map((entry) => {
        const { locale, slug } = handleI18nSlug(entry.slug)

        return {
          locale,
          params: {
            slug,
          },
        }
      })

      sitemap({
        dynamicParams,
      })

      return {
        params: {
          slug: handleI18nSlug(project.slug).slug,
        },
        props: {
          project,
          dynamicParams,
        },
      }
    }),
  )
}) satisfies GetStaticPaths

const { project, dynamicParams } = Astro.props

setDynamicParams(dynamicParams)

const { Content } = await project.render()
---

<PageLayout title={project.data.title} description={project.data.description}>
  <div class="animate">
    <BackToPrev href={getLocalePath('/projects')}> {t('projects.back_to')} </BackToPrev>
  </div>
  <div class="my-10">
    <div class="animate flex items-center gap-1.5">
      <div class="font-base text-sm">
        <FormattedDate date={project.data.date} />
      </div>
      &bull;
      <div class="font-base text-sm">
        {readingTime(project.body)}
      </div>
    </div>
    <div class="animate text-2xl font-semibold text-black dark:text-white">
      {project.data.title}
    </div>
    {
      project.data.description && (
        <div class="animate font-light text-black/50 dark:text-white/50">{project.data.description}</div>
      )
    }
    {
      project.data.stack && project.data.stack.length > 0 && (
        <div class="my-3 flex flex-wrap gap-1">
          {project.data.stack.map((item) => (
            <Icon name={devIconResolver[item].icon} size="1.3rem" class="animate" />
          ))}
        </div>
      )
    }

    <nav class="animate mt-6 flex gap-x-4">
      {
        project.data.repoURL && (
          <Button external to={project.data.repoURL} variant="secondary" size="sm">
            <Icon name="devicon:github" size="1.3rem" class="text-black/50 dark:text-white" />
          </Button>
        )
      }
      {
        project.data.demoURL && (
          <Button
            to={project.data.demoURL}
            variant="ghost"
            size="sm"
            external
            classes="text-black dark:text-white bg-zinc-400 dark:bg-zinc-800 flex items-center gap-x-1"
          >
            <span>Demo</span>
            <Icon name="ci:external-link" size="1.3rem" />
          </Button>
        )
      }
    </nav>
  </div>
  <article class="animate">
    <Content />
  </article>
</PageLayout>
