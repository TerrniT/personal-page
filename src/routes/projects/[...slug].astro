---
import { type CollectionEntry, getCollection } from 'astro:content'

import Button from '@components/Button.vue'
import BackToPrev from '@components/BackToPrev.vue'
import FormattedDate from '@components/FormattedDate.astro'

import PageLayout from '@layouts/PageLayout.astro'

import { readingTime, devIconResolver } from '@lib/utils'

import { Icon } from 'astro-icon/components'

export async function getStaticPaths() {
  const projects = (await getCollection('projects'))
    .filter((post) => !post.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())

  return projects.map((project) => ({
    params: { slug: project.slug },
    props: project,
  }))
}
type Props = CollectionEntry<'projects'>

const project = Astro.props
const { Content } = await project.render()
---

<PageLayout title={project.data.title} description={project.data.description}>
  <div class="animate">
    <BackToPrev> Back to projects </BackToPrev>
  </div>
  <div class="my-10">
    <div class="animate flex items-center gap-1.5">
      <div class="font-base text-sm">
        <FormattedDate date={project.data.date} />
      </div>
      &bull;
      <div class="font-base text-sm">
        {readingTime(project.body)}
      </div>
    </div>
    <div class="animate text-2xl font-semibold text-black dark:text-white">
      {project.data.title}
    </div>
    {
      project.data.description && (
        <div class="animate font-light text-black/50 dark:text-white/50">{project.data.description}</div>
      )
    }
    {
      project.data.stack && project.data.stack.length > 0 && (
        <div class="my-3 flex flex-wrap gap-1">
          {project.data.stack.map((item) => (
            <Icon name={devIconResolver[item].icon} size="1.3rem" class="animate" />
          ))}
        </div>
      )
    }

    <nav class="animate mt-6 flex gap-x-4">
      {
        project.data.repoURL && (
          <Button external to={project.data.repoURL} variant="secondary" size="sm">
            <Icon name="devicon:github" size="1.3rem" class="text-black/50 dark:text-white" />
          </Button>
        )
      }
      {
        project.data.demoURL && (
          <Button
            to={project.data.demoURL}
            variant="ghost"
            size="sm"
            external
            classes="text-black dark:text-white bg-zinc-400 dark:bg-zinc-800 flex items-center gap-x-1"
          >
            <span>Demo</span>
            <Icon name="ci:external-link" size="1.3rem" />
          </Button>
        )
      }
    </nav>
  </div>
  <article class="animate">
    <Content />
  </article>
</PageLayout>
