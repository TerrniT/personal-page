---
import { useI18n, getLangFromSlug } from '@lib/i18n'
import { resolveSlug } from '@lib/mdx'
import { readingTime, devIconResolver } from '@lib/utils'

import { getCollection } from 'astro:content'

import { Button } from '@components/vue/ui/button'

import BackToPrev from '@components/astro/BackToPrev.astro'
import FormattedDate from '@components/astro/FormattedDate.astro'

import PageLayout from '@layouts/PageLayout.astro'

import { Icon } from 'astro-icon/components'

export const getStaticPaths = async () => {
  const projects = (await getCollection('projects')).filter((p) => !p.data.draft)
  return projects
    .filter((item) => getLangFromSlug(item.slug) === 'en')
    .map((project) => {
      return {
        params: { slug: resolveSlug(project.slug) },
        props: {
          lang: 'en' as const,
          project,
        },
      }
    })
}

const { url } = Astro
const { t, p } = useI18n(url)

const { project } = Astro.props

const { Content } = await project.render()
---

<PageLayout title={project.data.title} description={project.data.description}>
  <div class="animate">
    <BackToPrev href={p('/projects')}> {t('projects.back_to')}</BackToPrev>
  </div>
  <div class="my-10">
    <div class="animate flex items-center gap-1.5">
      <div class="font-base text-sm">
        <FormattedDate date={project.data.date} />
      </div>
      &bull;
      <div class="font-base text-sm">
        {readingTime(project.body)}
      </div>
    </div>
    <div class="animate text-2xl font-semibold text-black dark:text-white">
      {project.data.title}
    </div>
    {
      project.data.description && (
        <div class="animate font-light text-black/50 dark:text-white/50">{project.data.description}</div>
      )
    }
    {
      project.data.stack && project.data.stack.length > 0 && (
        <div class="my-3 flex flex-wrap gap-1">
          {project.data.stack.map((item) => (
            <Icon name={devIconResolver[item].icon} size="1.3rem" class="animate" />
          ))}
        </div>
      )
    }

    <nav class="animate mt-6 flex gap-x-4">
      {
        project.data.repoURL && (
          <Button external to={project.data.repoURL} variant="secondary" size="sm">
            <Icon name="devicon:github" size="1.3rem" class="text-black/50 dark:text-white" />
          </Button>
        )
      }
      {
        project.data.demoURL && (
          <Button
            to={project.data.demoURL}
            variant="ghost"
            size="sm"
            external
            classes="text-black dark:text-white bg-zinc-400 dark:bg-zinc-800 flex items-center gap-x-1"
          >
            <span>Demo</span>
            <Icon name="ci:external-link" size="1.3rem" />
          </Button>
        )
      }
    </nav>
  </div>
  <article class="animate">
    <Content />
  </article>
</PageLayout>
