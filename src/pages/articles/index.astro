---
import { type CollectionEntry, getCollection } from 'astro:content'
import PageLayout from '@layouts/PageLayout.astro'
import Container from '@components/Container.astro'
import ArrowCard from '@components/ArrowCard.astro'
import { t } from 'i18next'

const data = (await getCollection('articles'))
  .filter((post) => !post.data.draft)
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())

type Acc = {
  [year: string]: CollectionEntry<'articles'>[]
}

const posts = data.reduce((acc: Acc, post) => {
  const year = post.data.date.getFullYear().toString()
  if (!acc[year]) {
    acc[year] = []
  }
  acc[year].push(post)
  return acc
}, {})

const years = Object.keys(posts).sort((a, b) => parseInt(b) - parseInt(a))
---

<PageLayout title={t('articles.title')} description={t('articles.description')}>
  <Container>
    <h1 class="animate text-xl font-semibold text-black dark:text-white">{t('articles.heading')}</h1>
    <div class="space-y-16">
      <section>
        <article class="space-y-4">
          <p class="animate">
            {t('articles.paragraph')}
          </p>
        </article>
      </section>
    </div>
    <div class="mt-14 space-y-4">
      {
        years.map((year) => (
          <section class="animate space-y-4">
            <div class="font-semibold text-black dark:text-white">{year}</div>
            <div>
              <ul class="flex flex-col gap-4">
                {posts[year].map((post) => (
                  <li>
                    <ArrowCard entry={post} />
                  </li>
                ))}
              </ul>
            </div>
          </section>
        ))
      }
    </div>
  </Container>
</PageLayout>
